project( otrplugin )
cmake_minimum_required( VERSION 2.8.6 )
set ( CMAKE_BUILD_TYPE Release )
set ( CMAKE_AUTOMOC TRUE )
find_package ( Qt4 REQUIRED )
include ( ${QT_USE_FILE} )

if (NOT WIN32)
	find_package( PkgConfig REQUIRED )
	pkg_check_modules( PC_LIBOTR QUIET libotr )
	pkg_check_modules( PC_LIBTIDY QUIET libtidy )
	pkg_check_modules( PC_LIBGCRYPT QUIET libgcrypt )
	pkg_check_modules( PC_LIBGPGERROR QUIET libgpg-error )
	set ( LIBOTR_DEFINITIONS ${PC_LIBOTR_CFLAGS_OTHER} )
	set ( LIBTIDY_DEFINITIONS ${PC_LIBTIDY_CFLAGS_OTHER} )
	set ( LIBGCRYPT_DEFINITIONS ${PC_LIBGCRYPT_CFLAGS_OTHER} )
	set ( LIBGPGERROR_DEFINITIONS ${PC_LIBGPGERROR_CFLAGS_OTHER} )
endif()

find_path(
	LIBOTR_INCLUDE_DIR libotr/privkey.h
	HINTS
	${PC_LIBOTR_INCLUDEDIR}
	${PC_LIBOTR_INCLUDE_DIRS}
	PATH_SUFFIXES
	libotr
)
find_library(LIBOTR_LIBRARY NAMES otr libotr
	HINTS ${PC_LIBOTR_LIBDIR} ${PC_LIBOTR_LIBRARY_DIRS} )
	set ( LIBOTR_LIBRARIES ${LIBOTR_LIBRARY} )
set ( LIBOTR_INCLUDE_DIRS ${LIBOTR_INCLUDE_DIR} )
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(
				libotr
				DEFAULT_MSG
				LIBOTR_LIBRARY
				LIBOTR_INCLUDE_DIR
)

find_path(
	LIBTIDY_INCLUDE_DIR tidy.h
	HINTS
	${PC_LIBTIDY_INCLUDEDIR}
	${PC_LIBTIDY_INCLUDE_DIRS}
	PATH_SUFFIXES
)
find_library(LIBTIDY_LIBRARY NAMES tidy libtidy
	HINTS ${PC_LIBTIDY_LIBDIR} ${PC_LIBTIDY_LIBRARY_DIRS} )
	set ( LIBTIDY_LIBRARIES ${LIBTIDY_LIBRARY} )
set ( LIBTIDY_INCLUDE_DIRS ${LIBTIDY_INCLUDE_DIR} )
find_package_handle_standard_args(
				libtidy
				DEFAULT_MSG
				LIBTIDY_LIBRARY
				LIBTIDY_INCLUDE_DIR
)

find_path(
	LIBGCRYPT_INCLUDE_DIR gcrypt.h
	HINTS
	${PC_LIBGCRYPT_INCLUDEDIR}
	${PC_LIBGCRYPT_INCLUDE_DIRS}
	PATH_SUFFIXES
)
find_library(LIBGCRYPT_LIBRARY NAMES gcrypt libgcrypt
	HINTS ${PC_LIBGCRYPT_LIBDIR} ${PC_LIBGCRYPT_LIBRARY_DIRS} )
	set ( LIBGCRYPT_LIBRARIES ${LIBGCRYPT_LIBRARY} )
set ( LIBGCRYPT_INCLUDE_DIRS ${LIBGCRYPT_INCLUDE_DIR} )
find_package_handle_standard_args(
				libgcrypt
				DEFAULT_MSG
				LIBGCRYPT_LIBRARY
				LIBGCRYPT_INCLUDE_DIR
)

find_path(
	LIBGPGERROR_INCLUDE_DIR gpg-error.h
	HINTS
	${PC_LIBGPGERROR_INCLUDEDIR}
	${PC_LIBGPGERROR_INCLUDE_DIRS}
	PATH_SUFFIXES
)
find_library(LIBGPGERROR_LIBRARY NAMES gpg-error libgpg-error
	HINTS ${PC_LIBGPGERROR_LIBDIR} ${PC_LIBGPGERROR_LIBRARY_DIRS} )
	set ( LIBGPGERROR_LIBRARIES ${LIBGPGERROR_LIBRARY} )
set ( LIBGPGERROR_INCLUDE_DIRS ${LIBGPGERROR_INCLUDE_DIR} )
find_package_handle_standard_args(
				libgpg-error
				DEFAULT_MSG
				LIBGPGERROR_LIBRARY
				LIBGPGERROR_INCLUDE_DIR
)
mark_as_advanced( 
	LIBOTR_INCLUDE_DIR
	LIBOTR_LIBRARY
	LIBTIDY_INCLUDE_DIR
	LIBTIDY_LIBRARY
	LIBGCRYPT_INCLUDE_DIR
	LIBGCRYPT_LIBRARY
	LIBGPGERROR_INCLUDE_DIR
	LIBGPGERROR_LIBRARY
)

add_definitions (
	-Wall
	${LIBOTR_DEFINITIONS}
	${LIBTIDY_DEFINITIONS} 
	${LIBGCRYPT_DEFINITIONS}
	${LIBGPGERROR_DEFINITIONS}
)
include_directories (
	${CMAKE_SOURCE_DIR}
	${CMAKE_CURRENT_BINARY_DIR}
	${QT_QTCORE_INCLUDE_DIR}
	${QT_QTGUI_INCLUDE_DIR}
	${QT_QTXML_INCLUDE_DIR}
	${LIBOTR_INCLUDE_DIR}
	${LIBTIDY_INCLUDE_DIR}
	${LIBGCRYPT_INCLUDE_DIR}
	${LIBGPGERROR_INCLUDE_DIR}
	../../include
	./src
	.
)
set ( _HDRS
	src/psiotrplugin.h
	src/otrmessaging.h
	src/otrinternal.h
	src/psiotrconfig.h
	src/psiotrclosure.h
	src/htmltidy.h
	src/otrlextensions.h
)
set ( _SRCS
	src/psiotrplugin.cpp
	src/otrmessaging.cpp
	src/otrinternal.cpp
	src/psiotrconfig.cpp
	src/psiotrclosure.cpp
	src/htmltidy.cpp
	src/otrlextensions.c
)
set ( _RSCS
	${PROJECT_NAME}.qrc
)
QT4_ADD_RESOURCES(RSCS ${_RSCS})
add_library (
	${PROJECT_NAME}
	SHARED
	${_SRCS}
	${UIS}
	${RSCS}
	${TRS}
	${MOCS}
)
target_link_libraries (
	${PROJECT_NAME}
	${QT_QTCORE_LIBRARY}
	${QT_QTGUI_LIBRARY}
	${QT_QTXML_LIBRARY}
	${LIBOTR_LIBRARY}
	${LIBTIDY_LIBRARY}
	${LIBGCRYPT_LIBRARY}
	${LIBGPGERROR_LIBRARY}
)
set ( PLUGIN_INSTALL_PATH ${PLUGIN_INSTALL_PATH} PARENT_SCOPE)
install (
	TARGETS
	${PROJECT_NAME}
	LIBRARY
	DESTINATION
	${CMAKE_INSTALL_PREFIX}/${PLUGIN_INSTALL_PATH}
)
